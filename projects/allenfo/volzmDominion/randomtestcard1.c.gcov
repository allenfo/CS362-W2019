        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <math.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:#define DEBUG 0
        -:   11:#define NOISY_Test 1
        -:   12:/*I looked at testDrawCard() function and used that as my base for the test*/
        -:   13:/*This function will test and compare a pre and post gameState*/
        -:   14:
        -:   15:int drawCard_fail;
        -:   16:int discardCard_fail;
        -:   17:int hand_fail;
        -:   18:int deck_fail;
     3000:   19:int testassert(int a, int b)
        -:   20:{
     3000:   21:	if(a==b)
        -:   22:	{
     3000:   23:		return 0;//if true
        -:   24:	}
        -:   25:	else
        -:   26:	{
    #####:   27:		return 1;// if false
        -:   28:	}
        -:   29:}
      500:   30:void smithyRandTest(int p, struct gameState *post)
        -:   31:{
        -:   32:	int preDraws[3];//cards get drawn 3 times by the function
      500:   33:	int bonus=0;
        -:   34:	struct gameState pre; //setting up a second game so that we can compare
      500:   35:	memcpy (&pre, post, sizeof(struct gameState));
        -:   36:	/*Holds results for that test*/
      500:   37:	int r= cardEffect(smithy,0,0,0, post, 0,&bonus);// should return 0
        -:   38:	/*draws 3 cards and stores then in an array.*/
     2000:   39:	for (int i = 0; i < 3; i++)
        -:   40:	{
     1500:   41:	  preDraws[i]=drawCard(p, &pre);
        -:   42:	}
      500:   43:	int d= discardCard(0, p, &pre, 0);
        -:   44:	/*Comparing the results*/
        -:   45:	/*Using the testassert function to return true or false*/
     2000:   46:	for(int j=0;j<3;j++)
        -:   47:	{
     1500:   48:		drawCard_fail=drawCard_fail+ testassert(preDraws[j],0);
        -:   49:	}
      500:   50:	discardCard_fail=discardCard_fail+testassert(d,0);
      500:   51:	deck_fail=deck_fail + testassert(pre.deckCount[p],post->deckCount[p]);
      500:   52:	hand_fail=hand_fail + testassert(pre.handCount[p],post->handCount[p]);
      500:   53:}
        -:   54:
        1:   55:int main ()
        -:   56:{
        1:   57:	srand(time(NULL));// keeps the values different everytime
        1:   58:	int testResults=0;
        -:   59:	struct gameState G;
        -:   60:	int deckCount, discardCount, handCount, player;
        1:   61:	printf("Random testing Smithy card.\n");
        -:   62:	int k;
      501:   63:	for(k=0;k<500;k++)
        -:   64:	{
        -:   65:		/*Taken from testDrawCard() to help set up*/
 13150500:   66:		for(int i=0;i< sizeof(struct gameState);i++)
        -:   67:		{
 13150000:   68:			((char*)&G)[i]=floor(Random() *256);
        -:   69:		}
      500:   70:		G.numPlayers=(rand() %3)+2;	//between 2 and 4 players
      500:   71:		G.numBuys=1;
      500:   72:		player =(rand() %G.numPlayers);
      500:   73:		deckCount=floor(Random() *MAX_DECK);
      500:   74:		handCount=floor(Random() *MAX_HAND);
      500:   75:		discardCount=floor(Random() *MAX_DECK);
      500:   76:		G.whoseTurn=player;
      500:   77:		G.playedCardCount = floor(Random() * (MAX_DECK - 1));
     2017:   78:		for(int j=0;j<G.numPlayers;j++)
        -:   79:		{
     1517:   80:			G.deckCount[j]=deckCount;
     1517:   81:			G.handCount[j]=handCount;
     1517:   82:			G.discardCount[j]=discardCount;
        -:   83:		}
      500:   84:		smithyRandTest(player, &G);
        -:   85:	}
        -:   86:	/*Adds up the fails*/
        1:   87:	testResults= drawCard_fail + discardCard_fail + hand_fail+  deck_fail;
        1:   88:	if(testResults==0)
        -:   89:	{
        1:   90:		printf("ALL TESTS PASS\n");
        -:   91:	}
        -:   92:	else
        -:   93:	{
    #####:   94:		printf("SOME TESTS FAILED.\n");
    #####:   95:		printf("drawCard() failed %d times.\ndiscardCard() failed %d times\nPlayer's hand count didn't match up %d times.\nPlayer's deck count didn't match up %d times.\n",drawCard_fail, discardCard_fail, hand_fail, deck_fail);
        -:   96:	}
        1:   97:	return 0;
        -:   98:}
