        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <math.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:#define DEBUG 0
        -:   11:#define NOISY_Test 1
        -:   12:/*I looked at testDrawCard() function and used that as my base for the test*/
        -:   13:/*This function will test and compare a pre and post gameState*/
        -:   14:int numBuys_fail;
        -:   15:int drawCard_fail;
        -:   16:int discardCard_fail;
        -:   17:int hand_fail;
        -:   18:int deck_fail;
        -:   19:int otherPlayers_fail;
     4982:   20:int testassert(int a, int b)
        -:   21:{
     4982:   22:	if(a==b)
        -:   23:	{
     4982:   24:		return 0;//if true
        -:   25:	}
        -:   26:	else
        -:   27:	{
    #####:   28:		return 1;// if false
        -:   29:	}
        -:   30:}
      500:   31:void council_roomRandTest(int p, struct gameState *post)
        -:   32:{
      500:   33:	int playerDraws[post->numPlayers]; //max_players is 4
        -:   34:	int preDraws[4];			//cards get drawn 4 times by the function
      500:   35:	int bonus=0;
        -:   36:	struct gameState pre;
      500:   37:	memcpy (&pre, post, sizeof(struct gameState));
        -:   38:	/*Holds results for that test*/
      500:   39:	int r= cardEffect(council_room,0,0,0, post, 0,&bonus);
        -:   40:	/*draws 4 cards and stores then in an array.*/
     2500:   41:	for (int i = 0; i < 4; i++)
        -:   42:	{
     2000:   43:	  preDraws[i]=drawCard(p, &pre);
        -:   44:	}
      500:   45:	 pre.numBuys++;
     1982:   46:	for (int i = 0; i < pre.numPlayers; i++)
        -:   47:	{
     1482:   48:	  if ( i != p )
        -:   49:	    {
      982:   50:	     playerDraws[i]=drawCard(i, &pre);
      982:   51:		otherPlayers_fail=otherPlayers_fail + testassert(playerDraws[i],0);
        -:   52:	    }
        -:   53:	}
        -:   54:			
      500:   55:	int d= discardCard(0, p, &pre, 0);
        -:   56:
        -:   57:	/*Comparing the results*/
      500:   58:	numBuys_fail=numBuys_fail+testassert(pre.numBuys,post->numBuys);
     2500:   59:	for(int j=0;j<4;j++)
        -:   60:	{
     2000:   61:		drawCard_fail=drawCard_fail+ testassert(preDraws[j],0);
        -:   62:	}
      500:   63:		discardCard_fail=discardCard_fail+testassert(d,0);
      500:   64:		deck_fail=deck_fail + testassert(pre.deckCount[p],post->deckCount[p]);
      500:   65:		hand_fail=hand_fail + testassert(pre.handCount[p],post->handCount[p]);
      500:   66:	}
        -:   67:
        1:   68:int main ()
        -:   69:{
        1:   70:	srand(time(NULL));// keeps values random and changing
        1:   71:	int testResults=0;
        -:   72:	struct gameState G;
        -:   73:	int deckCount, discardCount, handCount, player;
        1:   74:	printf("Random testing Council_room card.\n");
        -:   75:	int k;
      501:   76:	for(k=0;k<500;k++)
        -:   77:	{
        -:   78:		/*Set up same as testDrawCard()*/
 13150500:   79:		for(int i=0;i< sizeof(struct gameState);i++)
        -:   80:		{
 13150000:   81:			((char*)&G)[i]=floor(Random() *256);
        -:   82:		}
      500:   83:		G.numPlayers=(rand() %3)+2;	//between 2 and 4 players
      500:   84:		G.numBuys=1;
      500:   85:		player =(rand() %G.numPlayers);
      500:   86:		deckCount=floor(Random() *MAX_DECK);
      500:   87:		handCount=floor(Random() *MAX_HAND);
      500:   88:		discardCount=floor(Random() *MAX_DECK);
      500:   89:		G.whoseTurn=player;
      500:   90:		G.playedCardCount = floor(Random() * (MAX_DECK - 1));
     1982:   91:		for(int j=0;j<G.numPlayers;j++)
        -:   92:		{
     1482:   93:			G.deckCount[j]=deckCount;
     1482:   94:			G.handCount[j]=handCount;
     1482:   95:			G.discardCount[j]=discardCount;
        -:   96:		}
      500:   97:		council_roomRandTest(player, &G);
        -:   98:	}
        -:   99:	/*Adds up the fails*/
        1:  100:	testResults=numBuys_fail + drawCard_fail + discardCard_fail + hand_fail+  deck_fail + otherPlayers_fail;
        1:  101:	if(testResults==0)
        -:  102:	{
        1:  103:		printf("ALL TESTS PASS\n");
        -:  104:	}
        -:  105:	else
        -:  106:	{
    #####:  107:		printf("SOME TESTS FAILED.\n");
    #####:  108:		printf("numBuys failed %d times.\ndrawCard() failed %d times.\ndiscardCard() failed %d times\nPlayer's hand count didn't match up %d times.\nPlayer's deck count didn't match up %d times.\nOther player's drawCard() failed %d times.\n",numBuys_fail, drawCard_fail, discardCard_fail, hand_fail, deck_fail, otherPlayers_fail);
        -:  109:	}
        1:  110:	return 0;
        -:  111:}
