Starting test of the whoseTurn() function.
There are 2 players in this game
This loop will cycle through twice to show that the whose turn function returns the correct person
It is player 0's turn
It is player 1's turn
Testing isGameOver():
Setting Province supplyCount=0
Expected output =1, actual output =1
PASS
Setting three supply cards equal to 0.
One will be the last eNum card listed
Expected output =1, actual output =0
FAIL
ONE OR MORE TESTS FAILED
Testing drawCard():
deck count is currently  =5
hand count is currently =5
discard count is currently =0
Setting deckCount=0 and discard =5
expected deck count = 4, actual deck  count is now  =4
expected hand count =6, actual hand count is now =6
expected discard count =0 actual discard count is now =0
function should return 0, it returned 0
PASS
PASS
PASS
PASS
Setting deckCount=1 and discard =4
expected deck count = 0, actual deck  count is now  =0
expected hand count =6, actual hand count is now =6
expected discard count =4 actual discard count is now =4
function should return -1, it returned 0
PASS
PASS
PASS
FAIL
Testing gainCard():
adding smithy cards to: hand, deck, and discard
cards in each spot before running tests:
 deck = 5, hand = 5, discard = 0
smithy supply before test = 10
adding to discard
expected 1 actual was 1
adding to deck
expected 6 actual was 6
adding to hand
expected 6 actual was 6
expected smithy count 7 actual was 7
trying to add card not in use
council_room supply before test = -1
adding to discard
expected 1 actual was 1
adding to deck
expected 6 actual was 6
adding to hand
expected 6 actual was 6
Testing the adventurer card
expected hand count 7, actual was 7
PASSED
Expected total player cards = 10, actual was 10
PASSED
ALL TESTS PASSED
Testing smithy
expected hand count 7, actual was 7
, Smithy is not considered part of the hand once played from position 0
PASSED
Expected total player cards = 10, actual was 9
FAIL
ONE OR MORE TESTS HAVE FAILED
Testing council_room
expected hand count 8, actual was 8
council_room is not considered part of the hand once played from position 0
PASSED
Expected total player cards = 10, actual was 9
FAIL
Expected numBuys=2, Actual =2
PASSED
Other players expected hand =1, Actual =1
PASSED
ONE OR MORE TESTS HAVE FAILED
Testing mine
Testing function with a non treasure card
expected return -1, actual was -1
PASSED
Testing function with correct trash card(treasure) but not correct gain card
expected return -1, actual was -1
PASSED
Testing function with correct trash card(gold) but not correct difference in cost(bronze)
expected return -1, actual was -1
PASSED
Testing function with correct trash card(copper) with correct diff in cost but not correct type(village)
expected return -1, actual was 0
FAIL
Testing function with correct trash card(copper) with correct gain card(silver)
expected 5 cards in hand, actual was 5
PASSED
ONE OR MORE TESTS HAVE FAILED
File 'dominion.c'
Lines executed:38.89% of 558
Branches executed:43.41% of 417
Taken at least once:28.06% of 417
Calls executed:27.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:13
        -:    0:Programs:11
        -:    1:/*****************************************
        -:    2: * Forrest Allen
        -:    3: *  Assignment5
        -:    4: * Teammates code
        -:    5: * the two bug fixes are at lines 553 and 572*/
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
function compare called 26551 returned 100% blocks executed 100%
    26551:   13:int compare(const void* a, const void* b) {
    26551:   14:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    13358:   15:    return 1;
    13193:   16:  if (*(int*)a < *(int*)b)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
    12880:   17:    return -1;
      313:   18:  return 0;
        -:   19:}
        -:   20:
function newGame called 0 returned 0% blocks executed 0%
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
function initializeGame called 14 returned 100% blocks executed 88%
       14:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
       14:   49:  SelectStream(1);
call    0 returned 100%
       14:   50:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   51:  
        -:   52:  //check number of players
       14:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
       14:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
      154:   62:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:    {
     1540:   64:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:        {
     1400:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
       14:   78:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   79:    {
       14:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
       14:   92:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   93:    {
       14:   94:      state->supplyCount[estate] = 8;
       14:   95:      state->supplyCount[duchy] = 8;
       14:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
       14:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  107:  state->supplyCount[silver] = 40;
       14:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
      294:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  112:    {
     2310:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  114:	{
     2170:  115:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
      140:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  119:		{
       16:  120:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
      132:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
      140:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
     2030:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
       42:  143:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  144:    {
       28:  145:      state->deckCount[i] = 0;
      112:  146:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = estate;
       84:  149:	  state->deckCount[i]++;
        -:  150:	}
      224:  151:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  152:	{
      196:  153:	  state->deck[i][j] = copper;
      196:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
       42:  159:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  160:    {
       28:  161:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
       42:  168:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
       28:  171:      state->handCount[i] = 0;
       28:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
      392:  181:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  182:    {
      378:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
       14:  187:  state->outpostPlayed = 0;
       14:  188:  state->phase = 0;
       14:  189:  state->numActions = 1;
       14:  190:  state->numBuys = 1;
       14:  191:  state->playedCardCount = 0;
       14:  192:  state->whoseTurn = 0;
       14:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
       84:  197:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  198:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  199:  }
        -:  200:
       14:  201:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  202:
       14:  203:  return 0;
        -:  204:}
        -:  205:
function shuffle called 135 returned 100% blocks executed 100%
      135:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
      135:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
      135:  214:  if (state->deckCount[player] < 1)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
       74:  215:    return -1;
       61:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
     4589:  219:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     4467:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     4467:  221:    newDeck[newDeckPos] = state->deck[player][card];
     4467:  222:    newDeckPos++;
   244236:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   239769:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
     4467:  226:    state->deckCount[player]--;
        -:  227:  }
     4528:  228:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     4467:  229:    state->deck[player][i] = newDeck[i];
     4467:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
       61:  233:  return 0;
        -:  234:}
        -:  235:
function playCard called 0 returned 0% blocks executed 0%
    #####:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
    #####:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
    #####:  242:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
    #####:  248:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
call    0 never executed
        -:  255:	
        -:  256:  //check if selected card is an action
    #####:  257:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
    #####:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
    #####:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
    #####:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  273:	
    #####:  274:  return 0;
        -:  275:}
        -:  276:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  316:int numHandCards(struct gameState *state) {
    #####:  317:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  318:}
        -:  319:
function handCard called 0 returned 0% blocks executed 0%
    #####:  320:int handCard(int handPos, struct gameState *state) {
    #####:  321:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
function supplyCount called 7 returned 100% blocks executed 100%
        7:  325:int supplyCount(int card, struct gameState *state) {
        7:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
function whoseTurn called 1514 returned 100% blocks executed 100%
     1514:  351:int whoseTurn(struct gameState *state) {
     1514:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
function endTurn called 2 returned 100% blocks executed 100%
        2:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
        2:  358:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  359:  
        -:  360:  //Discard hand
       12:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
        2:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
        2:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
        1:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
        2:  375:  state->outpostPlayed = 0;
        2:  376:  state->phase = 0;
        2:  377:  state->numActions = 1;
        2:  378:  state->coins = 0;
        2:  379:  state->numBuys = 1;
        2:  380:  state->playedCardCount = 0;
        2:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
       12:  385:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  386:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  387:  }
        -:  388:
        -:  389:  //Update money
        2:  390:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  391:
        2:  392:  return 0;
        -:  393:}
        -:  394:
function isGameOver called 2 returned 100% blocks executed 91%
        2:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
        2:  400:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  401:    {
        1:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
        1:  406:  j = 0;
       26:  407:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  408:    {
       25:  409:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  410:	{
        2:  411:	  j++;
        -:  412:	}
        -:  413:    }
        1:  414:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
        1:  419:  return 0;
        -:  420:}
        -:  421:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function adventurerFunc called 1001 returned 100% blocks executed 93%
     1001:  530:int adventurerFunc(int handPos, int player, struct gameState *state, int drawntreasure, int *temphand, int z)
        -:  531:{
        -:  532:  int cardDrawn;
    88815:  533:  while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    86813:  534:    if (state->deckCount[player] < 0){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  535:      shuffle(player, state);
call    0 never executed
        -:  536:    }
    86813:  537:    drawCard(player, state);
call    0 returned 100%
    86813:  538:    cardDrawn = state->hand[player][state->handCount[player]-1];//top card of hand is most recently drawn card.
    86813:  539:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     2002:  540:      drawntreasure++;
        -:  541:    else{
    84811:  542:      temphand[z]=cardDrawn;
    84811:  543:      state->handCount[player]--; //this should just remove the top card (the most recently drawn one).
    84811:  544:      z++;
        -:  545:    }
        -:  546:  }
    86813:  547:  while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    84811:  548:    state->discard[player][state->discardCount[player]++]=temphand[z-1]; // discard all cards in play that have been drawn
    84811:  549:    z=z-1;
        -:  550:  }
     1001:  551:  return 0;
        -:  552:}
        -:  553:
        -:  554:
function smithyFunc called 501 returned 100% blocks executed 100%
      501:  555:int smithyFunc(int handPos, int player, struct gameState *state)
        -:  556:{
        -:  557:/*The bug on line 553 is that there is an extra =. should be <*/
     2004:  558:  for (int idx = 0; idx < 3; idx++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  559:    {
     1503:  560:      drawCard(player, state);
call    0 returned 100%
        -:  561:    }
        -:  562:    //discard card from hand
      501:  563:  discardCard(handPos, player, state, 0);
call    0 returned 100%
      501:  564:  return 0;
        -:  565:}
        -:  566:
        -:  567:
function councilroomFunc called 1002 returned 100% blocks executed 100%
     1002:  568:int councilroomFunc(int handPos, int player, struct gameState *state)
        -:  569:{
     5010:  570:  for (int idx = 0; idx < 4; idx++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  571:    {
     4008:  572:      drawCard(player, state);
call    0 returned 100%
        -:  573:    }
        -:  574:
        -:  575:  //+1 Buy
        -:  576: /*The bug was commenting out numBuys*/
     1002:  577:  state->numBuys++;
        -:  578:			
        -:  579:  //Each other player draws a card
     4002:  580:  for (int idx = 0; idx < state->numPlayers; idx++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  581:    {
     3000:  582:      if ( idx != player )
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  583:        {
     1998:  584:          drawCard(idx, state);
call    0 returned 100%
        -:  585:        }
        -:  586:    }
        -:  587:			
        -:  588:  //put played card in played card pile
     1002:  589:  discardCard(handPos, player, state, 0);
call    0 returned 100%
        -:  590:			
     1002:  591:  return 0;
        -:  592:}
        -:  593:
        -:  594:
function villageFunc called 0 returned 0% blocks executed 0%
    #####:  595:int villageFunc(int handPos, int player, struct gameState *state)
        -:  596:{
        -:  597:      //+1 Card
    #####:  598:      drawCard(player, state);
call    0 never executed
        -:  599:			
        -:  600:      //+2 Actions
    #####:  601:      state->numActions = state->numActions + 3;
        -:  602:			
        -:  603:      //discard played card from hand
    #####:  604:      discardCard(handPos, player, state, 0);
call    0 never executed
    #####:  605:      return 0;
        -:  606:}
        -:  607:
        -:  608:
function greathallFunc called 0 returned 0% blocks executed 0%
    #####:  609:int greathallFunc(int handPos, int player, struct gameState *state)
        -:  610:{
        -:  611:  //+1 Card
    #####:  612:  drawCard(player, state);
call    0 never executed
        -:  613:			
        -:  614:  //+1 Actions
    #####:  615:  state->numActions++;
        -:  616:			
        -:  617:  //discard card from hand
    #####:  618:  discardCard(handPos, player, state, 0);
call    0 never executed
    #####:  619:  return 0;
        -:  620:}
        -:  621:
function drawCard called 101900 returned 100% blocks executed 100%
   101900:  622:int drawCard(int player, struct gameState *state)
        -:  623:{	int count;
        -:  624:  int deckCounter;
   101900:  625:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  626:    
        -:  627:    //Step 1 Shuffle the discard pile back into a deck
        -:  628:    int i;
        -:  629:    //Move discard to deck
     4294:  630:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     4187:  631:      state->deck[player][i] = state->discard[player][i];
     4187:  632:      state->discard[player][i] = -1;
        -:  633:    }
        -:  634:
      107:  635:    state->deckCount[player] = state->discardCount[player];
      107:  636:    state->discardCount[player] = 0;//Reset discard
        -:  637:
        -:  638:    //Shufffle the deck
      107:  639:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  640:   
        -:  641:    if (DEBUG){//Debug statements
        -:  642:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  643:    }
        -:  644:    
      107:  645:    state->discardCount[player] = 0;
        -:  646:
        -:  647:    //Step 2 Draw Card
      107:  648:    count = state->handCount[player];//Get current player's hand count
        -:  649:    
        -:  650:    if (DEBUG){//Debug statements
        -:  651:      printf("Current hand count: %d\n", count);
        -:  652:    }
        -:  653:    
      107:  654:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  655:
      107:  656:    if (deckCounter == 0)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       74:  657:      return -1;
        -:  658:
       33:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       33:  660:    state->deckCount[player]--;
       33:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
        -:  664:  else{
   101793:  665:    int count = state->handCount[player];//Get current hand count for player
        -:  666:    int deckCounter;
        -:  667:    if (DEBUG){//Debug statements
        -:  668:      printf("Current hand count: %d\n", count);
        -:  669:    }
        -:  670:
   101793:  671:    deckCounter = state->deckCount[player];//Create holder for the deck count
   101793:  672:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   101793:  673:    state->deckCount[player]--;
   101793:  674:    state->handCount[player]++;//Increment hand count
        -:  675:  }
        -:  676:
   101826:  677:  return 0;
        -:  678:}
        -:  679:
function getCost called 2 returned 100% blocks executed 13%
        2:  680:int getCost(int cardNumber)
        -:  681:{
        2:  682:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 50%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  683:    {
        -:  684:    case curse:
    #####:  685:      return 0;
        -:  686:    case estate:
    #####:  687:      return 2;
        -:  688:    case duchy:
    #####:  689:      return 5;
        -:  690:    case province:
    #####:  691:      return 8;
        -:  692:    case copper:
        1:  693:      return 0;
        -:  694:    case silver:
    #####:  695:      return 3;
        -:  696:    case gold:
    #####:  697:      return 6;
        -:  698:    case adventurer:
    #####:  699:      return 6;
        -:  700:    case council_room:
    #####:  701:      return 5;
        -:  702:    case feast:
    #####:  703:      return 4;
        -:  704:    case gardens:
    #####:  705:      return 4;
        -:  706:    case mine:
    #####:  707:      return 5;
        -:  708:    case remodel:
    #####:  709:      return 4;
        -:  710:    case smithy:
    #####:  711:      return 4;
        -:  712:    case village:
        1:  713:      return 3;
        -:  714:    case baron:
    #####:  715:      return 4;
        -:  716:    case great_hall:
    #####:  717:      return 3;
        -:  718:    case minion:
    #####:  719:      return 5;
        -:  720:    case steward:
    #####:  721:      return 3;
        -:  722:    case tribute:
    #####:  723:      return 5;
        -:  724:    case ambassador:
    #####:  725:      return 3;
        -:  726:    case cutpurse:
    #####:  727:      return 4;
        -:  728:    case embargo: 
    #####:  729:      return 2;
        -:  730:    case outpost:
    #####:  731:      return 5;
        -:  732:    case salvager:
    #####:  733:      return 4;
        -:  734:    case sea_hag:
    #####:  735:      return 4;
        -:  736:    case treasure_map:
    #####:  737:      return 4;
        -:  738:    }
        -:  739:	
    #####:  740:  return -1;
        -:  741:}
        -:  742:
function cardEffect called 1505 returned 100% blocks executed 11%
     1505:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:  int i;
        -:  746:  int j;
        -:  747:  int k;
        -:  748:  int x;
        -:  749:  int index;
     1505:  750:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1505:  751:  int nextPlayer = currentPlayer + 1;
        -:  752:
     1505:  753:  int tributeRevealedCards[2] = {-1, -1};
        -:  754:  int temphand[MAX_HAND];// moved above the if statement
     1505:  755:  int drawntreasure=0;
        -:  756:  // int cardDrawn;  // moved to local function
     1505:  757:  int z = 0;// this is the counter for the temp hand
     1505:  758:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
      537:  759:    nextPlayer = 0;
        -:  760:  }
        -:  761:  
        -:  762:	
        -:  763:  //uses switch to select card and perform actions
     1505:  764:  switch( card ) 
branch  0 taken 0%
branch  1 taken 66%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  765:    {
        -:  766:    case adventurer:
    #####:  767:      return adventurerFunc(handPos, currentPlayer, state, drawntreasure, temphand, z);
call    0 never executed
        -:  768:/*
        -:  769:      while(drawntreasure<2){
        -:  770:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  771:	  shuffle(currentPlayer, state);
        -:  772:	}
        -:  773:	drawCard(currentPlayer, state);
        -:  774:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  775:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  776:	  drawntreasure++;
        -:  777:	else{
        -:  778:	  temphand[z]=cardDrawn;
        -:  779:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  780:	  z++;
        -:  781:	}
        -:  782:      }
        -:  783:      while(z-1>=0){
        -:  784:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  785:	z=z-1;
        -:  786:      }
        -:  787:      return 0;
        -:  788:*/
        -:  789:    case council_room:
     1000:  790:      return councilroomFunc(handPos, currentPlayer, state);
call    0 returned 100%
        -:  791:      //+4 Cards
        -:  792:/*
        -:  793:      for (i = 0; i < 4; i++)
        -:  794:	{
        -:  795:	  drawCard(currentPlayer, state);
        -:  796:	}
        -:  797:			
        -:  798:      //+1 Buy
        -:  799:      state->numBuys++;
        -:  800:			
        -:  801:      //Each other player draws a card
        -:  802:      for (i = 0; i < state->numPlayers; i++)
        -:  803:	{
        -:  804:	  if ( i != currentPlayer )
        -:  805:	    {
        -:  806:	      drawCard(i, state);
        -:  807:	    }
        -:  808:	}
        -:  809:			
        -:  810:      //put played card in played card pile
        -:  811:      discardCard(handPos, currentPlayer, state, 0);
        -:  812:			
        -:  813:      return 0;
        -:  814:*/
        -:  815:			
        -:  816:    case feast:
        -:  817:      //gain card with cost up to 5
        -:  818:      //Backup hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  820:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  821:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  822:      }
        -:  823:      //Backup hand
        -:  824:
        -:  825:      //Update Coins for Buy
    #####:  826:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  827:      x = 1;//Condition to loop on
    #####:  828:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  829:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  830:	  if (DEBUG)
        -:  831:	    printf("None of that card left, sorry!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  835:	  }
        -:  836:	}
    #####:  837:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  838:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  842:	  }
        -:  843:	}
        -:  844:	else{
        -:  845:
        -:  846:	  if (DEBUG){
        -:  847:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  848:	  }
        -:  849:
    #####:  850:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  851:	  x = 0;//No more buying cards
        -:  852:
        -:  853:	  if (DEBUG){
        -:  854:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  855:	  }
        -:  856:
        -:  857:	}
        -:  858:      }     
        -:  859:
        -:  860:      //Reset Hand
    #####:  861:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  862:	state->hand[currentPlayer][i] = temphand[i];
    #####:  863:	temphand[i] = -1;
        -:  864:      }
        -:  865:      //Reset Hand
        -:  866:      			
    #####:  867:      return 0;
        -:  868:			
        -:  869:    case gardens:
    #####:  870:      return -1;
        -:  871:			
        -:  872:    case mine:
        5:  873:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  874:
        5:  875:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  876:	{
        4:  877:	  return -1;
        -:  878:	}
        -:  879:		
        1:  880:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:
        1:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
        1:  890:      gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  891:
        -:  892:      //discard card from hand
        1:  893:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  894:
        -:  895:      //discard trashed card
        2:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  897:	{
        2:  898:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  899:	    {
        1:  900:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        1:  901:	      break;
        -:  902:	    }
        -:  903:	}
        -:  904:			
        1:  905:      return 0;
        -:  906:			
        -:  907:    case remodel:
    #####:  908:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  909:
    #####:  910:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  911:	{
    #####:  912:	  return -1;
        -:  913:	}
        -:  914:
    #####:  915:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  916:
        -:  917:      //discard card from hand
    #####:  918:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  919:
        -:  920:      //discard trashed card
    #####:  921:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  922:	{
    #####:  923:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  924:	    {
    #####:  925:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  926:	      break;
        -:  927:	    }
        -:  928:	}
        -:  929:
        -:  930:
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case smithy:
        -:  934:      //+3 Cards
      500:  935:      return smithyFunc(handPos, currentPlayer, state);
call    0 returned 100%
        -:  936:/*
        -:  937:      for (i = 0; i < 3; i++)
        -:  938:	{
        -:  939:	  drawCard(currentPlayer, state);
        -:  940:	}
        -:  941:			
        -:  942:      //discard card from hand
        -:  943:      discardCard(handPos, currentPlayer, state, 0);
        -:  944:      return 0;
        -:  945:*/		
        -:  946:    case village:
    #####:  947:      return villageFunc(handPos, currentPlayer, state);
call    0 never executed
        -:  948:/*
        -:  949:      //+1 Card
        -:  950:      drawCard(currentPlayer, state);
        -:  951:			
        -:  952:      //+2 Actions
        -:  953:      state->numActions = state->numActions + 2;
        -:  954:			
        -:  955:      //discard played card from hand
        -:  956:      discardCard(handPos, currentPlayer, state, 0);
        -:  957:      return 0;
        -:  958:*/
        -:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case great_hall:
    #####: 1011:      return greathallFunc(handPos, currentPlayer, state);
call    0 never executed
        -: 1012:/*
        -: 1013:      //+1 Card
        -: 1014:      drawCard(currentPlayer, state);
        -: 1015:			
        -: 1016:      //+1 Actions
        -: 1017:      state->numActions++;
        -: 1018:			
        -: 1019:      //discard card from hand
        -: 1020:      discardCard(handPos, currentPlayer, state, 0);
        -: 1021:      return 0;
        -: 1022:*/
        -: 1023:    case minion:
        -: 1024:      //+1 action
    #####: 1025:      state->numActions++;
        -: 1026:			
        -: 1027:      //discard card from hand
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1029:			
    #####: 1030:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1031:	{
    #####: 1032:	  state->coins = state->coins + 2;
        -: 1033:	}
        -: 1034:			
    #####: 1035:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1036:	{
        -: 1037:	  //discard hand
    #####: 1038:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1039:	    {
    #####: 1040:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1041:	    }
        -: 1042:				
        -: 1043:	  //draw 4
    #####: 1044:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1045:	    {
    #####: 1046:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1047:	    }
        -: 1048:				
        -: 1049:	  //other players discard hand and redraw if hand size > 4
    #####: 1050:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1051:	    {
    #####: 1052:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1053:		{
    #####: 1054:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1055:		    {
        -: 1056:		      //discard hand
    #####: 1057:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1058:			{
    #####: 1059:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1060:			}
        -: 1061:							
        -: 1062:		      //draw 4
    #####: 1063:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1064:			{
    #####: 1065:			  drawCard(i, state);
call    0 never executed
        -: 1066:			}
        -: 1067:		    }
        -: 1068:		}
        -: 1069:	    }
        -: 1070:				
        -: 1071:	}
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case steward:
    #####: 1075:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
        -: 1077:	  //+2 cards
    #####: 1078:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
    #####: 1081:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
        -: 1083:	  //+2 coins
    #####: 1084:	  state->coins = state->coins + 2;
        -: 1085:	}
        -: 1086:      else
        -: 1087:	{
        -: 1088:	  //trash 2 cards in hand
    #####: 1089:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1090:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1091:	}
        -: 1092:			
        -: 1093:      //discard card from hand
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case tribute:
    #####: 1098:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1099:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1100:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1101:	  state->deckCount[nextPlayer]--;
        -: 1102:	}
    #####: 1103:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1104:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1105:	  state->discardCount[nextPlayer]--;
        -: 1106:	}
        -: 1107:	else{
        -: 1108:	  //No Card to Reveal
        -: 1109:	  if (DEBUG){
        -: 1110:	    printf("No cards to reveal\n");
        -: 1111:	  }
        -: 1112:	}
        -: 1113:      }
        -: 1114:	    
        -: 1115:      else{
    #####: 1116:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1117:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1118:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1119:	    state->deckCount[nextPlayer]++;
    #####: 1120:	    state->discard[nextPlayer][i] = -1;
    #####: 1121:	    state->discardCount[nextPlayer]--;
        -: 1122:	  }
        -: 1123:			    
    #####: 1124:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1125:	} 
    #####: 1126:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1127:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1128:	state->deckCount[nextPlayer]--;
    #####: 1129:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1130:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1131:	state->deckCount[nextPlayer]--;
        -: 1132:      }    
        -: 1133:		       
    #####: 1134:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1135:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1136:	state->playedCardCount++;
    #####: 1137:	tributeRevealedCards[1] = -1;
        -: 1138:      }
        -: 1139:
    #####: 1140:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1142:	  state->coins += 2;
        -: 1143:	}
        -: 1144:		    
    #####: 1145:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1146:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1148:	}
        -: 1149:	else{//Action Card
    #####: 1150:	  state->numActions = state->numActions + 2;
        -: 1151:	}
        -: 1152:      }
        -: 1153:	    
    #####: 1154:      return 0;
        -: 1155:		
        -: 1156:    case ambassador:
    #####: 1157:      j = 0;		//used to check if player has enough cards to discard
        -: 1158:
    #####: 1159:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1160:	{
    #####: 1161:	  return -1;				
        -: 1162:	}
        -: 1163:
    #####: 1164:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:
    #####: 1169:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1170:	{
    #####: 1171:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1172:	    {
    #####: 1173:	      j++;
        -: 1174:	    }
        -: 1175:	}
    #####: 1176:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;				
        -: 1179:	}
        -: 1180:
        -: 1181:      if (DEBUG) 
        -: 1182:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1183:
        -: 1184:      //increase supply count for choosen card by amount being discarded
    #####: 1185:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1186:			
        -: 1187:      //each other player gains a copy of revealed card
    #####: 1188:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1191:	    {
    #####: 1192:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1193:	    }
        -: 1194:	}
        -: 1195:
        -: 1196:      //discard played card from hand
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1198:
        -: 1199:      //trash copies of cards returned to supply
    #####: 1200:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
    #####: 1202:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1203:	    {
    #####: 1204:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1205:		{
    #####: 1206:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1207:		  break;
        -: 1208:		}
        -: 1209:	    }
        -: 1210:	}			
        -: 1211:
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case cutpurse:
        -: 1215:
    #####: 1216:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1217:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1220:	    {
    #####: 1221:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1222:		{
    #####: 1223:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1224:		    {
    #####: 1225:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1226:		      break;
        -: 1227:		    }
    #####: 1228:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1229:		    {
    #####: 1230:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1231:			{
        -: 1232:			  if (DEBUG)
        -: 1233:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1234:			}	
    #####: 1235:		      break;
        -: 1236:		    }		
        -: 1237:		}
        -: 1238:					
        -: 1239:	    }
        -: 1240:				
        -: 1241:	}				
        -: 1242:
        -: 1243:      //discard played card from hand
    #####: 1244:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1245:
    #####: 1246:      return 0;
        -: 1247:
        -: 1248:		
        -: 1249:    case embargo: 
        -: 1250:      //+2 Coins
    #####: 1251:      state->coins = state->coins + 2;
        -: 1252:			
        -: 1253:      //see if selected pile is in play
    #####: 1254:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1255:	{
    #####: 1256:	  return -1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //add embargo token to selected supply pile
    #####: 1260:      state->embargoTokens[choice1]++;
        -: 1261:			
        -: 1262:      //trash card
    #####: 1263:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1264:      return 0;
        -: 1265:		
        -: 1266:    case outpost:
        -: 1267:      //set outpost flag
    #####: 1268:      state->outpostPlayed++;
        -: 1269:			
        -: 1270:      //discard card
    #####: 1271:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1272:      return 0;
        -: 1273:		
        -: 1274:    case salvager:
        -: 1275:      //+1 buy
    #####: 1276:      state->numBuys++;
        -: 1277:			
    #####: 1278:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1279:	{
        -: 1280:	  //gain coins equal to trashed card
    #####: 1281:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1282:	  //trash card
    #####: 1283:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1284:	}
        -: 1285:			
        -: 1286:      //discard card
    #####: 1287:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1288:      return 0;
        -: 1289:		
        -: 1290:    case sea_hag:
    #####: 1291:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1292:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1293:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1294:	  state->discardCount[i]++;
    #####: 1295:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1296:	}
        -: 1297:      }
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case treasure_map:
        -: 1301:      //search hand for another treasure_map
    #####: 1302:      index = -1;
    #####: 1303:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1304:	{
    #####: 1305:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1306:	    {
    #####: 1307:	      index = i;
    #####: 1308:	      break;
        -: 1309:	    }
        -: 1310:	}
    #####: 1311:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1312:	{
        -: 1313:	  //trash both treasure cards
    #####: 1314:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1315:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1316:
        -: 1317:	  //gain 4 Gold cards
    #####: 1318:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1319:	    {
    #####: 1320:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1321:	    }
        -: 1322:				
        -: 1323:	  //return success
    #####: 1324:	  return 1;
        -: 1325:	}
        -: 1326:			
        -: 1327:      //no second treasure_map found in hand
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
    #####: 1331:  return -1;
        -: 1332:}
        -: 1333:
function discardCard called 3005 returned 100% blocks executed 78%
     3005: 1334:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1335:{
        -: 1336:	
        -: 1337:  //if card is not trashed, added to Played pile 
     3005: 1338:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1339:    {
        -: 1340:      //add card to played pile
     3005: 1341:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3005: 1342:      state->playedCardCount++;
        -: 1343:    }
        -: 1344:	
        -: 1345:  //set played card to -1
     3005: 1346:  state->hand[currentPlayer][handPos] = -1;
        -: 1347:	
        -: 1348:  //remove card from player's hand
     3005: 1349:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1350:    {
        -: 1351:      //reduce number of cards in hand
    #####: 1352:      state->handCount[currentPlayer]--;
        -: 1353:    }
     3005: 1354:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:    {
        -: 1356:      //reduce number of cards in hand
    #####: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:  else 	
        -: 1360:    {
        -: 1361:      //replace discarded card with last card in hand
     3005: 1362:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1363:      //set last card to -1
     3005: 1364:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1365:      //reduce number of cards in hand
     3005: 1366:      state->handCount[currentPlayer]--;
        -: 1367:    }
        -: 1368:	
     3005: 1369:  return 0;
        -: 1370:}
        -: 1371:
function gainCard called 7 returned 100% blocks executed 100%
        7: 1372:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1373:{
        -: 1374:  //Note: supplyPos is enum of choosen card
        -: 1375:	
        -: 1376:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1377:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        -: 1378:    {
        3: 1379:      return -1;
        -: 1380:    }
        -: 1381:	
        -: 1382:  //added card for [whoseTurn] current player:
        -: 1383:  // toFlag = 0 : add to discard
        -: 1384:  // toFlag = 1 : add to deck
        -: 1385:  // toFlag = 2 : add to hand
        -: 1386:
        4: 1387:  if (toFlag == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1388:    {
        1: 1389:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1390:      state->deckCount[player]++;
        -: 1391:    }
        3: 1392:  else if (toFlag == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1393:    {
        2: 1394:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1395:      state->handCount[player]++;
        -: 1396:    }
        -: 1397:  else
        -: 1398:    {
        1: 1399:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1400:      state->discardCount[player]++;
        -: 1401:    }
        -: 1402:	
        -: 1403:  //decrease number in supply pile
        4: 1404:  state->supplyCount[supplyPos]--;
        -: 1405:	 
        4: 1406:  return 0;
        -: 1407:}
        -: 1408:
function updateCoins called 16 returned 100% blocks executed 82%
       16: 1409:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1410:{
        -: 1411:  int i;
        -: 1412:	
        -: 1413:  //reset coin count
       16: 1414:  state->coins = 0;
        -: 1415:
        -: 1416:  //add coins for each Treasure card in player's hand
       96: 1417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1418:    {
       80: 1419:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 23%
        -: 1420:	{
       62: 1421:	  state->coins += 1;
        -: 1422:	}
       18: 1423:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1424:	{
    #####: 1425:	  state->coins += 2;
        -: 1426:	}
       18: 1427:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1428:	{
    #####: 1429:	  state->coins += 3;
        -: 1430:	}	
        -: 1431:    }	
        -: 1432:
        -: 1433:  //add bonus
       16: 1434:  state->coins += bonus;
        -: 1435:
       16: 1436:  return 0;
        -: 1437:}
        -: 1438:
        -: 1439:
        -: 1440://end of dominion.c
        -: 1441:
